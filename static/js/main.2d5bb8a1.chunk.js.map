{"version":3,"sources":["components/MenuComponent.js","components/CopyToClipboardComponent.js","components/HeaderComponent.js","services/DbService.js","components/HtmlToJUnitComponent.js","services/JunitService.js","services/ClassGeneratorService.js","components/ControllerGeneratorComponent.js","components/ServiceGeneratorComponent.js","components/SettingsComponent.js","App.js","serviceWorker.js","index.js"],"names":["MenuComponent","Menu","stackable","Item","alt","src","as","Link","to","React","Component","CopyToClipboardComponent","state","copied","this","props","textToCopy","title","textLength","split","length","Form","size","TextArea","label","placeholder","name","rows","value","text","onCopy","setState","Button","toggle","icon","active","content","HeaderComponent","subTitle","Header","subheader","DbService","db","Dexie","version","stores","settings","metadata","count","then","settingsRecords","bulkAdd","propertyName","toArray","key","where","p","first","s","bulkPut","values","get","md","update","add","HtmlToJUnitComponent","path","html","junitTest","metaDataKey","dbService","handleChange","e","handleSubmit","tagsToExclude","output","$","cheerio","load","filter","each","tagName","prop","id","attr","isIdSet","toLowerCase","indexOf","isTagToExclude","replace","href","action","method","type","checked","options","find","i","optionText","optionValue","selected","Formatter","createJavaFormatter","format","join","junitService","saveMetadata","getMetadata","Grid","columns","padded","Column","onSubmit","Input","onChange","primary","capitalizeFirst","str","charAt","toUpperCase","slice","getConstants","constantString","map","c","getAutowiredServices","autowiredServicesString","isTest","MockBean","opts","code","basePackage","controllersPackageName","controllerName","S","camelize","constants","autowiredServices","endpoints","httpMethod","methodName","templateName","redirectTo","servicesPackageName","serviceName","serviceMethods","visibilityKeyword","returnType","a","getSetting","console","log","ControllerGeneratorComponent","controllerClass","controllerTestClass","generationService","getSettings","bp","ServiceGeneratorComponent","serviceClass","serviceTestClass","SettingsComponent","isSaved","settingsTmp","forEach","setSettings","Modal","trigger","header","actions","positive","App","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6UAIqBA,E,uKAEnB,OACC,6BACC,kBAACC,EAAA,EAAD,CAAMC,WAAS,GACd,kBAACD,EAAA,EAAKE,KAAN,KACC,yBAAKC,IAAI,OAAOC,IAAI,4CAErB,kBAACJ,EAAA,EAAKE,KAAN,CAAWG,GAAIC,IAAMC,GAAG,KAAxB,sBAGA,kBAACP,EAAA,EAAKE,KAAN,CAAWG,GAAIC,IAAMC,GAAG,wBAAxB,wBAGA,kBAACP,EAAA,EAAKE,KAAN,CAAWG,GAAIC,IAAMC,GAAG,qBAAxB,qBAGA,kBAACP,EAAA,EAAKE,KAAN,CAAWG,GAAIC,IAAMC,GAAG,aAAxB,kB,GAjBsCC,IAAMC,W,0BCI5BC,E,4MAEpBC,MAAQ,CACPC,QAAQ,G,uDAGC,IAAD,SAEoBC,KAAKC,MAA3BC,EAFE,EAEFA,WAAYC,EAFV,EAEUA,MACZJ,EAAWC,KAAKF,MAAhBC,OACAK,EAAaF,EAAWG,MAAM,MAAMC,OAE1C,OAEC,6BAEC,kBAACC,EAAA,EAAD,CAAMC,KAAK,SACV,kBAACD,EAAA,EAAKE,SAAN,CACCC,MAAOP,EACPQ,YAAaR,EACbS,KAAK,aACLC,KAAMT,EAAa,GAAKA,EAAa,GAErCU,MAAOZ,IAGR,kBAAC,kBAAD,CAAiBa,KAAMb,EACtBc,OAAQ,kBAAM,EAAKC,SAAS,CAAElB,QAAQ,MACtC,kBAACQ,EAAA,EAAKW,OAAN,CACCC,QAAM,EACNC,KAAOrB,EAAgB,OAAP,KAChBsB,OAAQtB,EACRuB,QAAUvB,EAA+B,UAAtB,wBAItB,kC,GApCkDJ,IAAMC,W,SCJvC2B,E,uKACV,IAAD,EAEwBvB,KAAKC,MAA9BE,EAFC,EAEDA,MAAOqB,EAFN,EAEMA,SAAUJ,EAFhB,EAEgBA,KAExB,OACC,6BACC,kBAACK,EAAA,EAAD,CAAQjC,GAAG,KACV4B,KAAMA,GAAc,OACpBE,QAASnB,EACTuB,UAAWF,S,GAV6B7B,IAAMC,W,qECF9B+B,E,WAIpB,aAAe,yBAFfC,GAAK,IAAIC,IAAM,WAGd7B,KAAK4B,GAAGE,QAAQ,GAAGC,OAAO,CACzBC,SAAU,iCAEXhC,KAAK4B,GAAGE,QAAQ,GAAGC,OAAO,CACzBE,SAAU,QAGX,IAAID,EAAWhC,KAAK4B,GAAGI,SACRhC,KAAK4B,GAAGK,SAEvBD,EAASE,QAAQC,MAAK,SAAAC,GACE,IAApBA,GACFJ,EAASK,QAAQ,CAChB,CAACzB,KAAM,eAAgBE,MAAO,aAAcwB,aAAc,eAC1D,CAAC1B,KAAM,2BAA4BE,MAAO,aAAcwB,aAAc,0BACtE,CAAC1B,KAAM,wBAAyBE,MAAO,UAAWwB,aAAc,uBAChE,CAAC1B,KAAM,qBAAsBE,MAAO,OAAQwB,aAAc,yB,oLAQhDtC,KAAK4B,GAAGI,SAASO,U,wNAGdC,G,uFACFxC,KAAK4B,GAAGI,SAASS,MAAM,CAACH,aAAcE,I,cAAhDE,E,gBACSA,EAAEC,OAAM,SAAAC,GAAC,OAAIA,EAAE9B,S,0NAGXkB,G,iFACJhC,KAAK4B,GAAGI,SAChBa,QAAQb,G,2NAGKQ,EAAKM,G,4FACV9C,KAAK4B,GAAGK,SAASc,IAAI,CAACP,QAAM,SAAAQ,GACxC,OAAGA,EACK,EAAKpB,GAAGK,SAASgB,OAAOT,EAAK,CAACM,WAE9B,EAAKlB,GAAGK,SAASiB,IAAI,CAACV,MAAKM,c,4NAMnBN,G,iFACJxC,KAAK4B,GAAGK,SAASc,IAAI,CAACP,Q,sJC7ChBW,E,kDAejB,aAAe,IAAD,8BACV,gBAfJrD,MAAQ,CACJsD,KAAM,aACNC,KAAK,uLAKLC,UAAW,IAOD,EAJdC,YAAc,cAIA,EAFdC,UAAY,IAAI7B,EAEF,EAWd8B,aAAe,SAACC,EAAD,OAAM9C,EAAN,EAAMA,KAAME,EAAZ,EAAYA,MAAZ,OAAwB,EAAKG,SAAL,eAAiBL,EAAOE,KAXjD,EAad6C,aAAe,WAAO,IAAD,EACM,EAAK7D,MAApBsD,EADS,EACTA,KAAMC,EADG,EACHA,KACRC,EClCC,SAACF,EAAMC,GAErB,IAAMO,EAAgB,CAAC,QAAS,OAAQ,SAAU,QAAS,UAGvDC,EAAS,GAEbA,GAAM,qIAI+CT,EAJ/C,iBAON,IAAMU,EAAIC,IAAQC,KAAKX,GA6GvB,OA3GAS,EAAE,KAAKG,OAbuB,QAc5BC,MAAK,WACL,IAAMC,EAAUL,EAAE9D,MAAMoE,KAAK,WACvBC,EAAKP,EAAE9D,MAAMsE,KAAK,MAClBvD,EAAO+C,EAAE9D,MAAMe,OACfwD,EAAUF,GAAa,KAAPA,EAetB,GAbIE,IACHV,GAAM,oDAAiDM,EAAQK,cAAzD,iBAA+EH,EAA/E,sCAIHE,IAhCgB,SAACJ,EAASP,GAChC,OAAyD,IAAlDA,EAAca,QAAQN,EAAQK,eA+BnBE,CAAeP,EAASP,KACvCC,GAAM,oDACuDM,EAAQK,cAD/D,iBACqFH,EADrF,0EAE0CtD,EAAK4D,QAAQ,aAAc,IAAIA,QAAQ,MAAO,KAFxF,mCAOHR,GAAqC,MAA1BA,EAAQK,cAAuB,CAC7C,IAAMI,EAAOd,EAAE9D,MAAMsE,KAAK,QAC1BT,GAAM,oDACuDM,EAAQK,cAD/D,iBACqFH,EADrF,gFAE0CO,EAF1C,kCAOP,GAAIT,GAAqC,SAA1BA,EAAQK,cAA0B,CAChD,IAAMK,EAASf,EAAE9D,MAAMsE,KAAK,UACtBQ,EAAShB,EAAE9D,MAAMsE,KAAK,UAC5BT,GAAM,oDACuDM,EAAQK,cAD/D,iBACqFH,EADrF,kFAE0CQ,EAF1C,4CAKNhB,GAAM,oDACuDM,EAAQK,cAD/D,iBACqFH,EADrF,kFAE0CS,EAF1C,4CAOP,GAAIX,GAAqC,UAA1BA,EAAQK,cAA2B,CACjD,IAAMO,EAAOjB,EAAE9D,MAAMsE,KAAK,QAM1B,GALAT,GAAM,oDACuDM,EAAQK,cAD/D,iBACqFH,EADrF,+BAC6GU,EAD7G,+BAKO,UAATA,GAA6B,aAATA,EAAqB,CAC5C,IAAMC,EAAUlB,EAAE9D,MAAMsE,KAAK,WACzBU,IACHnB,GAAM,oDAC6DM,EAAQK,cADrE,iBAC2FH,EAD3F,kCACsHW,EADtH,0CAQT,GAAIb,GAAqC,WAA1BA,EAAQK,cAA4B,CAClD,IAAMS,EAAUnB,EAAE9D,MAAMkF,KAAK,UAC7BrB,GAAM,oDACuDM,EAAQK,cAD/D,iBACqFH,EADrF,kCACgHY,EAAQ3E,OADxH,8BAIN2E,EAAQf,MAAK,SAAUiB,GAEtBtB,GAAM,oDAC0DM,EAAQK,cADlE,iBACwFH,EADxF,qBACuGc,EAAI,EAD3G,6CAKN,IAAMC,EAAatB,EAAE9D,MAAMe,OAE3B,GAAIqE,EAAY,CACf,IAAMC,EAAcvB,EAAE9D,MAAMsE,KAAK,SACjCT,GAAM,oDAC6DM,EAAQK,cADrE,iBAC2FH,EAD3F,qBAC0Gc,EAAI,EAD9G,0FAE+DC,EAF/D,oEAMNvB,GAAM,oDAC6DM,EAAQK,cADrE,iBAC2FH,EAD3F,qBAC0Gc,EAAI,EAD9G,iGAE+DE,EAF/D,oEAOP,IAAMC,EAAWxB,EAAE9D,MAAMsE,KAAK,YAC1BgB,IACHzB,GAAM,oDAC6DM,EAAQK,cADrE,iBAC2FH,EAD3F,qBAC0Gc,EAAI,EAD9G,oGAE+DG,EAF/D,8CASXzB,GAAM,SAGgB0B,IAAUC,oBAAoB,QAC/BC,OAAO5B,GAAQ6B,KAAK,MDzFhBC,CAAavC,EAAMC,GACrC,EAAKpC,SAAS,CACVqC,UAAWA,IAGf,EAAKE,UAAUoC,aAAa,EAAKrC,YAAa,CAACH,OAAMC,UAjBrD,EAAKG,UAAUqC,YAAY,EAAKtC,aAC3BpB,MAAK,SAAAa,GACCA,GACC,EAAK/B,SAAS+B,EAAGF,WANnB,E,qDAuBJ,IAAD,EAE6B9C,KAAKF,MAA/BsD,EAFH,EAEGA,KAAMC,EAFT,EAESA,KAAMC,EAFf,EAEeA,UAEpB,OACI,6BACI,kBAACwC,EAAA,EAAD,CAAMC,QAAS,EAAGC,QAAM,GACpB,kBAACF,EAAA,EAAKG,OAAN,KACI,kBAAC,EAAD,CAAiB9F,MAAM,qBACnBqB,SAAS,sFAGrB,kBAACsE,EAAA,EAAD,CAAMC,QAAS,EAAGC,QAAM,GACpB,kBAACF,EAAA,EAAKG,OAAN,KACI,kBAAC1F,EAAA,EAAD,CACIC,KAAK,QACL0F,SAAUlG,KAAK2D,cAEf,kBAACpD,EAAA,EAAK4F,MAAN,CACIzF,MAAM,OACNC,YAAY,OACZC,KAAK,OACLE,MAAOsC,EACPgD,SAAUpG,KAAKyD,eAEnB,kBAAClD,EAAA,EAAKE,SAAN,CACIC,MAAM,OACNC,YAAY,OACZC,KAAK,OACLC,KAAK,KACLC,MAAOuC,EACP+C,SAAUpG,KAAKyD,eAEnB,kBAAClD,EAAA,EAAKW,OAAN,CAAamF,SAAO,EAAC/E,QAAQ,0BAKrC,kBAACwE,EAAA,EAAKG,OAAN,KAEK3C,GACG,kBAAC,EAAD,CACInD,MAAM,iBACND,WAAYoD,W,GAjFM3D,IAAMC,W,kBEJlD0G,EAAkB,SAACC,GAAD,OAASA,EAAIC,OAAO,GAAGC,cAAgBF,EAAIG,MAAM,IAEnEC,EAAe,SAACC,GACrB,OAAOA,EAAevG,MAAM,MAC1BwG,KAAI,SAAAC,GAAC,qCAA4BA,EAA5B,QACLpB,KAAK,OAGFqB,EAAuB,SAACC,EAAyBC,GAAmC,IAA3BC,EAA0B,uDAAf,WACzE,OAAOF,EAAwB3G,MAAM,MACnCwG,KAAI,SAAAC,GAAC,iBAAQG,EAASC,EAAW,YAA5B,iBACFJ,EADE,QAELpB,KAAK,OAmOO,EA1JiB,SAACyB,GAEhC,IA3FqBvG,EA2FfwG,EAAI,kBAAcD,EAAKE,YAAnB,YAAkCF,EAAKG,uBAAvC,qcA3FW1G,EAsGMuG,EAAKI,eArGzBjB,EAAgBkB,EAAG5G,GAAO6G,WAAW7E,IA0FlC,sBAcL+D,EAAaQ,EAAKO,WAdb,mBAgBLX,EAAqBI,EAAKQ,mBAAmB,GAhBxC,mBAkBQR,EAAKS,UAzFAvH,MAAM,MAC3BwG,KAAI,SAAAC,GAAM,IAAD,EAC4CA,EAAEzG,MAAM,KADpD,mBACFwH,EADE,KACUzE,EADV,KACgB0E,EADhB,KAC4BC,EAD5B,KAGT,GAAgC,QAA7BF,EAAWrD,cACb,MAAM,2BAAN,OAAkC8B,EAAgBwB,GAAlD,8FAEiDC,EAFjD,kKAOuB3E,EAPvB,2DAQ0C0E,EAR1C,mEAUexB,EAAgBwB,GAV/B,wEAcI,IAAoE,IAAjE,CAAC,OAAQ,MAAO,UAAUrD,QAAQoD,EAAWrD,eACrD,CACC,IAAMwD,EAAaD,EACnB,MAAM,uBAAN,OAA8B3E,EAA9B,2CACsB0E,EADtB,iVAUoCE,EAVpC,kBAcD,MAAO,MAEPtC,KAAK,MAiCG,OAsBV,OADsBH,IAAUC,oBAAoB,QAC/BC,OAAO2B,GAAM1B,KAAK,OAkIzB,EA/HqB,SAACyB,GACpC,IAAMC,EAAI,kBAAcD,EAAKE,YAAnB,YAAkCF,EAAKG,uBAAvC,irBAciBH,EAAKI,eAdtB,0BAeHJ,EAAKI,eAfF,uBAiBRZ,EAAaQ,EAAKO,WAjBV,6DAsBRX,EAAqBI,EAAKQ,mBAAmB,GAtBrC,iBAwBSR,EAAKS,UA/EDvH,MAAM,MAC3BwG,KAAI,SAAAC,GAAM,IAAD,EAC4CA,EAAEzG,MAAM,KADpD,mBACFwH,EADE,KACUzE,EADV,KACgB0E,EADhB,KAC4BC,EAD5B,KAGT,MAAgC,QAA7BF,EAAWrD,cACP,+BAAN,OACasD,EADb,iIAEiD1E,EAFjD,gFAGqD2E,EAHrD,yJAQaD,EARb,6GASiD1E,EATjD,wMAgBM,MAGPsC,KAAK,MA+BG,OA4BV,OADsBH,IAAUC,oBAAoB,QAC/BC,OAAO2B,GAAM1B,KAAK,OAkGzB,EAlDc,SAACyB,GAE7B,IAAMC,EAAI,kBAAcD,EAAKE,YAAnB,YAAkCF,EAAKc,oBAAvC,yFAKId,EAAKe,YALT,iBAMRvB,EAAaQ,EAAKO,WANV,iBAQRX,EAAqBI,EAAKQ,mBAAmB,GARrC,mBAUeR,EAAKgB,eAxDH9H,MAAM,MAC/BwG,KAAI,SAAAC,GAAM,IAAD,EAC2CA,EAAEzG,MAAM,KADnD,mBACF+H,EADE,KACiBC,EADjB,KAC6BP,EAD7B,KAGT,OAAIM,GAAsBC,GAAeP,EAET,SAA7BO,EAAW7D,cACP,GAAN,OAAU4D,EAAV,YAA+BC,EAA/B,YAA6CP,EAA7C,sIAQM,GAAN,OAAUM,EAAV,YAA+BC,EAA/B,YAA6CP,EAA7C,4HAEyEO,EAFzE,mCAGaA,EAHb,wEAX2D,QAmB5D3C,KAAK,MAuBG,OAcV,OADsBH,IAAUC,oBAAoB,QAC/BC,OAAO2B,GAAM1B,KAAK,OAkCzB,EA/BkB,SAACyB,GACjC,MAAM,WAAN,OAAkBA,EAAKE,YAAvB,YAAsCF,EAAKc,oBAA3C,2WAWOd,EAAKe,YAXZ,uBAaEvB,EAAaQ,EAAKO,WAbpB,iBAeEX,EAAqBI,EAAKQ,mBAAmB,EAAM,QAfrD,iCAkBER,EAAKe,YAlBP,0BAkBoCf,EAAKe,YAlBzC,oFAyB6Bf,EAAKgB,eA9DP9H,MAAM,MAC/BwG,KAAI,SAAAC,GAAM,IAAD,EAC2CA,EAAEzG,MAAM,KADnD,mBACF+H,EADE,KACiBC,EADjB,KAC6BP,EAD7B,KAGT,OAAIM,GAAsBC,GAAeP,EAEnC,YAAN,OAAmBxB,EAAgBwB,GAAnC,kGAEqEO,EAFrE,yBAGSA,EAHT,4BAF4D,QAS5D3C,KAAK,MAwBP,Q,4CC7MD,8BAAA4C,EAAA,uEACyB,IAAI3G,GAAY4G,WAAW,eADpD,cACKlB,EADL,iBAEuC,IAAI1F,GAAY4G,WAAW,0BAFlE,cAEQjB,EAFR,OAIIkB,QAAQC,IAAI,yBAA0BnB,GAJ1C,kBAKQ,CACAD,cACAC,2BAPR,4C,0BAWqBoB,E,kDAejB,aAAe,IAAD,8BACV,gBAfJ5I,MAAQ,CACVuH,YAAa,aACbE,eAAgB,eAChBG,UAAU,kCACVC,kBAAkB,0CAClBC,UAAU,kJAEJe,gBAAiB,KACjBC,oBAAqB,MAMX,EAHdrF,YAAc,sBAGA,EAFdC,UAAY,IAAI7B,EAEF,EAad8B,aAAe,SAACC,EAAD,OAAM9C,EAAN,EAAMA,KAAME,EAAZ,EAAYA,MAAZ,OAAwB,EAAKG,SAAL,eAAiBL,EAAOE,KAbjD,EAed6C,aAAe,WAAO,IAAD,EACwF,EAAK7D,MAAtGuH,EADS,EACTA,YAAaE,EADJ,EACIA,eAAgBD,EADpB,EACoBA,uBAAwBI,EAD5C,EAC4CA,UAAWC,EADvD,EACuDA,kBAAmBC,EAD1E,EAC0EA,UACrFe,EAAkBE,EAA0C,CACvExB,cACSE,iBACAD,yBACTI,YACAC,oBACAC,cAGWgB,EAAsBC,EAA8C,CAC/ExB,cACSE,iBACAD,yBACTI,YACAC,oBACAC,cAGK,EAAK3G,SAAS,CACV0H,gBAAiBA,EACjBC,oBAAqBA,IAGzB,EAAKpF,UAAUoC,aAAa,EAAKrC,YAAa,CAAC8D,cAAaE,iBAAgBD,yBAAwBI,YAAWC,oBAAmBC,e,0CArClIkB,GAAc3G,MAAK,SAAA4G,GAAE,OAAI,EAAK9H,SAAS8H,MACvC,EAAKvF,UAAUqC,YAAY,EAAKtC,aAC3BpB,MAAK,SAAAa,GACCA,GACC,EAAK/B,SAAS+B,EAAGF,WAPnB,E,qDA4CJ,IAAD,EASA9C,KAAKF,MANfyH,EAHU,EAGVA,eACAG,EAJU,EAIVA,UACAC,EALU,EAKVA,kBACAC,EANU,EAMVA,UACSe,EAPC,EAODA,gBACAC,EARC,EAQDA,oBAGJ,OACI,6BACI,kBAAC9C,EAAA,EAAD,CAAMC,QAAS,EAAGC,QAAM,GACpB,kBAACF,EAAA,EAAKG,OAAN,KACI,kBAAC,EAAD,CAAiB9F,MAAM,uBACnBqB,SAAS,kEAGrB,kBAACsE,EAAA,EAAD,CAAMC,QAAS,EAAGC,QAAM,GACpB,kBAACF,EAAA,EAAKG,OAAN,KACI,kBAAC1F,EAAA,EAAD,CACIC,KAAK,QACL0F,SAAUlG,KAAK2D,cAGf,kBAACpD,EAAA,EAAK4F,MAAN,CACIzF,MAAM,kBACNC,YAAY,kBACZC,KAAK,iBACLU,QAAQ,eACRR,MAAOyG,EACPnB,SAAUpG,KAAKyD,eAGpB,kBAAClD,EAAA,EAAKE,SAAN,CACKC,MAAM,YAC9BC,YAAY,YAEYC,KAAK,YACLC,KAAK,IACLC,MAAO4G,EACPtB,SAAUpG,KAAKyD,eAGxC,kBAAClD,EAAA,EAAKE,SAAN,CACyBC,MAAM,qBAC9BC,YAAY,qBAEYC,KAAK,oBACLC,KAAK,IACLC,MAAO6G,EACPvB,SAAUpG,KAAKyD,eAExC,kBAAClD,EAAA,EAAKE,SAAN,CACyBC,MAAM,YAC9BC,YAAY,YAEYC,KAAK,YACLC,KAAK,IACLC,MAAO8G,EACPxB,SAAUpG,KAAKyD,eAInB,kBAAClD,EAAA,EAAKW,OAAN,CAAamF,SAAO,EAAC/E,QAAQ,uBAKrC,kBAACwE,EAAA,EAAKG,OAAN,KAEK0C,GACG,6BACI,kBAAC,EAAD,CACIxI,MAAM,mBACND,WAAYyI,IAEhB,kBAAC,EAAD,CACIxI,MAAM,wBACND,WAAY0I,Y,GA3IUjJ,IAAMC,W,4CCXhE,8BAAA0I,EAAA,uEACyB,IAAI3G,GAAY4G,WAAW,eADpD,cACKlB,EADL,iBAEoC,IAAI1F,GAAY4G,WAAW,uBAF/D,cAEQN,EAFR,yBAIQ,CACAZ,cACAY,wBANR,4C,0BAUqBe,E,kDAejB,aAAe,IAAD,8BACV,gBAfJlJ,MAAQ,CACVuH,YAAa,aACba,YAAa,YACbR,UAAU,oCACVC,kBAAkB,8BAClBQ,eAAe,mFAETc,aAAc,KACdC,iBAAkB,MAMR,EAHd3F,YAAc,mBAGA,EAFdC,UAAY,IAAI7B,EAEF,EAad8B,aAAe,SAACC,EAAD,OAAM9C,EAAN,EAAMA,KAAME,EAAZ,EAAYA,MAAZ,OAAwB,EAAKG,SAAL,eAAiBL,EAAOE,KAbjD,EAed6C,aAAe,WAAO,IAAD,EACuF,EAAK7D,MAArGuH,EADS,EACTA,YAAaa,EADJ,EACIA,YAAaD,EADjB,EACiBA,oBAAqBP,EADtC,EACsCA,UAAWC,EADjD,EACiDA,kBAAmBQ,EADpE,EACoEA,eAC/Ec,EAAeJ,EAAuC,CACjExB,cACSa,cACAD,sBACTP,YACAC,oBACAQ,mBAGWe,EAAmBL,EAA2C,CACzExB,cACSa,cACAD,sBACTP,YACAC,oBACAQ,mBAGK,EAAKlH,SAAS,CACVgI,aAAcA,EACdC,iBAAkBA,IAGtB,EAAK1F,UAAUoC,aAAa,EAAKrC,YAAa,CAAC8D,cAAaa,cAAaD,sBAAqBP,YAAWC,oBAAmBQ,oB,0CArC5HW,GAAc3G,MAAK,SAAA4G,GAAE,OAAI,EAAK9H,SAAS8H,MACvC,EAAKvF,UAAUqC,YAAY,EAAKtC,aAC3BpB,MAAK,SAAAa,GACCA,GACC,EAAK/B,SAAS+B,EAAGF,WAPnB,E,qDA2CJ,IAAD,EASA9C,KAAKF,MANfoI,EAHU,EAGVA,YACAR,EAJU,EAIVA,UACAC,EALU,EAKVA,kBACAQ,EANU,EAMVA,eACSc,EAPC,EAODA,aACAC,EARC,EAQDA,iBAGJ,OACI,6BACI,kBAACpD,EAAA,EAAD,CAAMC,QAAS,EAAGC,QAAM,GACpB,kBAACF,EAAA,EAAKG,OAAN,KACI,kBAAC,EAAD,CAAiB9F,MAAM,oBACnBqB,SAAS,+DAGrB,kBAACsE,EAAA,EAAD,CAAMC,QAAS,EAAGC,QAAM,GACpB,kBAACF,EAAA,EAAKG,OAAN,KACI,kBAAC1F,EAAA,EAAD,CACIC,KAAK,QACL0F,SAAUlG,KAAK2D,cAEpC,kBAACpD,EAAA,EAAK4F,MAAN,CACyBzF,MAAM,eACNC,YAAY,eACZC,KAAK,cACLE,MAAOoH,EACP9B,SAAUpG,KAAKyD,eAEnB,kBAAClD,EAAA,EAAKE,SAAN,CACIC,MAAM,YAC9BC,YAAY,YAEYC,KAAK,YACLC,KAAK,IACLC,MAAO4G,EACPtB,SAAUpG,KAAKyD,eAExC,kBAAClD,EAAA,EAAKE,SAAN,CACyBC,MAAM,qBAC9BC,YAAY,qBAEYC,KAAK,oBACLC,KAAK,IACLC,MAAO6G,EACPvB,SAAUpG,KAAKyD,eAExC,kBAAClD,EAAA,EAAKE,SAAN,CACyBC,MAAM,kBAC9BC,YAAY,kBAEYC,KAAK,iBACLC,KAAK,IACLC,MAAOqH,EACP/B,SAAUpG,KAAKyD,eAInB,kBAAClD,EAAA,EAAKW,OAAN,CAAamF,SAAO,EAAC/E,QAAQ,uBAKrC,kBAACwE,EAAA,EAAKG,OAAN,KAEKgD,GACG,6BACI,kBAAC,EAAD,CACI9I,MAAM,gBACND,WAAY+I,IAEhB,kBAAC,EAAD,CACI9I,MAAM,qBACND,WAAYgJ,Y,GAtIOvJ,IAAMC,W,SCXxCuJ,E,kDAQjB,aAAe,IAAD,8BACV,gBARJrJ,MAAQ,CACJkC,SAAU,GACVoH,SAAS,GAKC,EAFd5F,UAAY,IAAI7B,EAEF,EAad8B,aAAe,SAACC,EAAD,GAAyB,IAAnB9C,EAAkB,EAAlBA,KAAME,EAAY,EAAZA,MACvB,EAAKG,SAAL,eAAiBL,EAAOE,KAdd,EAiBd6C,aAAe,WACX,IAAI0F,EAAc,EAAKvJ,MAAMkC,SAC7BqH,EAAYC,SAAQ,SAAA1G,GAChBA,EAAE9B,MAAQ,EAAKhB,MAAM8C,EAAEN,iBAG3B,EAAKkB,UAAU+F,YAAYF,GAC3B,EAAKpI,SAAS,CACVmI,SAAS,KAvBb,EAAK5F,UAAUsF,cAAc3G,MAAK,SAAAH,GAC9BA,EAASsH,SAAQ,SAAA1G,GACb,EAAK3B,SAAL,eAAgB2B,EAAEN,aAAgBM,EAAE9B,WAExC,EAAKG,SAAS,CACVe,gBAPE,E,qDA+BJ,IAAD,OAEGA,EAAahC,KAAKF,MAAlBkC,SAER,OACI,6BACI,kBAAC8D,EAAA,EAAD,CAAMC,QAAS,EAAGC,QAAM,GACpB,kBAACF,EAAA,EAAKG,OAAN,KACI,kBAAC,EAAD,CAAiB9F,MAAM,kBACnBqB,SAAS,+BACTJ,KAAK,eAGjB,kBAAC0E,EAAA,EAAD,CAAMC,QAAS,EAAGC,QAAM,GACpB,kBAACF,EAAA,EAAKG,OAAN,KACI,kBAAC1F,EAAA,EAAD,CACIC,KAAK,QACL0F,SAAUlG,KAAK2D,cAEd3B,EAAS6E,KAAI,SAACjE,EAAGuC,GAAJ,OAAU,kBAAC5E,EAAA,EAAK4F,MAAN,CACpB3D,IAAK2C,EACLzE,MAAOkC,EAAEhC,KACTD,YAAaiC,EAAEhC,KACfA,KAAMgC,EAAEN,aACR+B,GAAIzB,EAAEyB,GACNvD,MAAO,EAAKhB,MAAM8C,EAAEN,cACpB8D,SAAU,EAAK3C,kBAKnB,kBAAC+F,EAAA,EAAD,CACIC,QAAS,kBAAClJ,EAAA,EAAKW,OAAN,CAAamF,SAAO,EAAC/E,QAAQ,kBACtCoI,OAAO,iBACPpI,QAAQ,yCACRqI,QAAS,CAAC,CAAEnH,IAAK,OAAQlB,QAAS,QAASsI,UAAU,c,GA1EtCjK,IAAMC,WCmCtCiK,MAjCf,WAIC,OAFA,IAAIlI,EAGH,kBAAC,IAAD,KACC,6BACC,kBAAC,EAAD,MAEA,kBAACmE,EAAA,EAAD,CAAMC,QAAS,EAAGC,QAAM,GACvB,kBAACF,EAAA,EAAKG,OAAN,KACC,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAO6D,OAAK,EAAC1G,KAAK,KACjB,kBAAC,EAAD,OAED,kBAAC,IAAD,CAAOA,KAAK,wBACX,kBAAC,EAAD,OAED,kBAAC,IAAD,CAAOA,KAAK,qBACX,kBAAC,EAAD,OAED,kBAAC,IAAD,CAAOA,KAAK,aACX,kBAAC,EAAD,aCtBY2G,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvI,MAAK,SAAAwI,GACjCA,EAAaC,kB","file":"static/js/main.2d5bb8a1.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Menu } from 'semantic-ui-react';\n\nexport default class MenuComponent extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Menu stackable>\n\t\t\t\t\t<Menu.Item>\n\t\t\t\t\t\t<img alt=\"Logo\" src='https://react.semantic-ui.com/logo.png' />\n\t\t\t\t\t</Menu.Item>\n\t\t\t\t\t<Menu.Item as={Link} to=\"/\">\n                        HTML TO JUNIT TEST\n\t\t\t\t\t</Menu.Item>\n\t\t\t\t\t<Menu.Item as={Link} to=\"/generate-controller\">\n                        CONTROLLER GENERATOR\n\t\t\t\t\t</Menu.Item>\n\t\t\t\t\t<Menu.Item as={Link} to=\"/generate-service\">\n                        SERVICE GENERATOR\n\t\t\t\t\t</Menu.Item>\n\t\t\t\t\t<Menu.Item as={Link} to=\"/settings\">\n                        SETTINGS\n\t\t\t\t\t</Menu.Item>\n\t\t\t\t</Menu>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n\tForm\n} from 'semantic-ui-react';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\n\nexport default class CopyToClipboardComponent extends React.Component {\n\n\tstate = {\n\t\tcopied: false\n\t};\n\n\trender() {\n\n\t\tlet { textToCopy, title } = this.props;\n\t\tlet { copied } = this.state; \n\t\tconst textLength = textToCopy.split('\\n').length;\n\n\t\treturn (\n\n\t\t\t<div>\n\n\t\t\t\t<Form size=\"large\">\n\t\t\t\t\t<Form.TextArea\n\t\t\t\t\t\tlabel={title}\n\t\t\t\t\t\tplaceholder={title}\n\t\t\t\t\t\tname='textToCopy'\n\t\t\t\t\t\trows={textLength < 15 ? textLength : 15}\n\t\t\t\t\t\t\n\t\t\t\t\t\tvalue={textToCopy}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<CopyToClipboard text={textToCopy}\n\t\t\t\t\t\tonCopy={() => this.setState({ copied: true })}>\n\t\t\t\t\t\t<Form.Button\n\t\t\t\t\t\t\ttoggle\n\t\t\t\t\t\t\ticon={!copied ? null : 'copy'}\n\t\t\t\t\t\t\tactive={copied}\n\t\t\t\t\t\t\tcontent={!copied ? 'COPY TO CLIPBOARD' : 'COPIED!'} />\n\t\t\t\t\t</CopyToClipboard>\n\n\t\t\t\t</Form>\n\t\t\t\t<br />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nCopyToClipboardComponent.propTypes = {\n\ttitle: PropTypes.string,\n\ttextToCopy: PropTypes.string\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Header } from 'semantic-ui-react';\n\nexport default class HeaderComponent extends React.Component {\n\trender() {\n\t\t\n\t\tconst {title, subTitle, icon} = this.props;\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Header as='h1' \n\t\t\t\t\ticon={icon ? icon : 'code'}\n\t\t\t\t\tcontent={title}\n\t\t\t\t\tsubheader={subTitle}></Header>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nHeaderComponent.propTypes = {\n\ttitle: PropTypes.string,\n\tsubTitle: PropTypes.string,\n\ticon: PropTypes.string\n}\n","import Dexie from 'dexie';\n\nexport default class DbService {\n\t\n\tdb = new Dexie('jgen_db');\n\n\tconstructor() {\n\t\tthis.db.version(1).stores({\n\t\t\tsettings: 'id++,name,value,propertyName'\n\t\t});\n\t\tthis.db.version(2).stores({\n\t\t\tmetadata: 'key'\n\t\t});\n\n\t\tlet settings = this.db.settings;\n\t\tlet metadata = this.db.metadata;\n\n\t\tsettings.count().then(settingsRecords => {\n\t\t\tif(settingsRecords === 0) {\n\t\t\t\tsettings.bulkAdd([\n\t\t\t\t\t{name: 'Base package', value: 'my.package', propertyName: 'basePackage'},\n\t\t\t\t\t{name: 'Controllers package name', value: 'controller', propertyName: 'controllersPackageName'},\n\t\t\t\t\t{name: 'Services package name', value: 'service', propertyName: 'servicesPackageName'},\n\t\t\t\t\t{name: 'Forms package name', value: 'form', propertyName: 'formsPackageName'}\n\t\t\t\t]);\n\t\t\t}\n\t\t});\n\n\t}\n\n\tasync getSettings() {\n\t\treturn await this.db.settings.toArray();\n\t}\n\n\tasync getSetting(key) {\n\t\tlet p = await this.db.settings.where({propertyName: key})\n\t\treturn await p.first(s => s.value);\n\t}\n\n\tasync setSettings(settings) {\n\t\treturn await this.db.settings\n\t\t\t\t\t\t.bulkPut(settings);\n\t}\n\n\tasync saveMetadata(key, values) {\n\t\treturn await this.db.metadata.get({key}, md => {\n\t\t\tif(md) {\n\t\t\t\treturn this.db.metadata.update(key, {values});\n\t\t\t} else {\n\t\t\t\treturn this.db.metadata.add({key, values});\n\t\t\t}\n\t\t\t\n\t\t});\n\t}\n\n\tasync getMetadata(key) {\n\t\treturn await this.db.metadata.get({key});\n\t}\n}","import React from \"react\";\nimport {\n    Form,\n    Grid\n} from 'semantic-ui-react';\n\nimport CopyToClipboardComponent from './CopyToClipboardComponent';\nimport HeaderComponent from './HeaderComponent';\nimport junitService from '../services/JunitService';\nimport DbService from '../services/DbService';\n\nexport default class HtmlToJUnitComponent extends React.Component {\n    state = {\n        path: '/some-path',\n        html: `<ul id=\"fruits\">\n                    <li id=\"apple\">Apple</li>\n                    <li id=\"orange\">Orange</li>\n                    <li id=\"pear\">Pear</li>\n                </ul>`,\n        junitTest: ''\n    };\n\n    metaDataKey = 'htmlToJunit';\n\n    dbService = new DbService();\n\n    constructor() {\n        super();\n\n        this.dbService.getMetadata(this.metaDataKey)\n            .then(md => {\n                if(md) {\n                    this.setState(md.values);\n                }\n            });\n    }\n\n    handleChange = (e, { name, value }) => this.setState({ [name]: value });\n\n    handleSubmit = () => {\n        const { path, html } = this.state;\n        const junitTest = junitService(path, html);\n        this.setState({\n            junitTest: junitTest\n        })\n\n        this.dbService.saveMetadata(this.metaDataKey, {path, html});\n    }\n\n    render() {\n\n        const { path, html, junitTest } = this.state\n\n        return (\n            <div>\n                <Grid columns={1} padded>\n                    <Grid.Column>\n                        <HeaderComponent title='HTML to JUNIT TEST'\n                            subTitle='Enter the URL path you want to run your JUnit test on and the HTML to evaluate.' />\n                    </Grid.Column>\n                </Grid>\n                <Grid columns={2} padded>\n                    <Grid.Column>\n                        <Form\n                            size=\"large\"\n                            onSubmit={this.handleSubmit}>\n\n                            <Form.Input\n                                label=\"Path\"\n                                placeholder='Path'\n                                name='path'\n                                value={path}\n                                onChange={this.handleChange}\n                            />\n                            <Form.TextArea\n                                label=\"HTML\"\n                                placeholder='Html'\n                                name='html'\n                                rows='15'\n                                value={html}\n                                onChange={this.handleChange}\n                            />\n                            <Form.Button primary content='GENERATE JUNIT TEST' />\n\n                        </Form>\n                    </Grid.Column>\n\n                    <Grid.Column>\n\n                        {junitTest &&\n                            <CopyToClipboardComponent\n                                title='GENERATED TEST'\n                                textToCopy={junitTest} />\n                        }\n                    </Grid.Column>\n                </Grid>\n            </div>\n\n        );\n    }\n}\n","import Formatter from 'auto-format';\nimport cheerio from 'cheerio';\n\nconst isTagToExclude = (tagName, tagsToExclude) => {\n\treturn tagsToExclude.indexOf(tagName.toLowerCase()) !== -1;\n};\n\nexport default (path, html) => {\n\n\tconst tagsToExclude = ['input', 'form', 'select', 'table', 'iframe'];\n\tconst childElementsSelector = '[id]';\n\n\tlet output = '';\n\n\toutput += `\n    @Test\n    public void testPageElements() throws Exception\n\t{\n        mockMvc.perform(MockMvcRequestBuilders.get(\"${path}\"))\n        `;\n\n\tconst $ = cheerio.load(html);\n\n\t$('*').filter(childElementsSelector)\n\t\t.each(function () {\n\t\t\tconst tagName = $(this).prop('tagName');\n\t\t\tconst id = $(this).attr('id');\n\t\t\tconst text = $(this).text();\n\t\t\tconst isIdSet = id && id !== '';\n\n\t\t\tif (isIdSet) {\n\t\t\t\toutput += `.andExpect(MockMvcResultMatchers.xpath(\"//${tagName.toLowerCase()}[@id='${id}']\").exists())\n                `;\n\t\t\t}\n\n\t\t\tif (isIdSet && !isTagToExclude(tagName, tagsToExclude)) {\n\t\t\t\toutput +=\n                    `.andExpect(MockMvcResultMatchers.xpath(\"//${tagName.toLowerCase()}[@id='${id}']\")\n\t\t\t\t\t\t.string(Matchers.equalToIgnoringWhiteSpace(\"${text.replace(/^\\s+|\\s+$/g, '').replace(/\\n/g, ' ')}\")))\n\t\t\t\t\t\t\n\t\t\t\t\t`;\n\t\t\t}\n\n\t\t\tif (tagName && tagName.toLowerCase() === 'a') {\n\t\t\t\tconst href = $(this).attr('href');\n\t\t\t\toutput +=\n                    `.andExpect(MockMvcResultMatchers.xpath(\"//${tagName.toLowerCase()}[@id='${id}']/@href\")\n\t\t\t\t\t\t.string(Matchers.equalToIgnoringWhiteSpace(\"${href}\")))\n\t\t\t\t\t\t\n\t\t\t\t\t`;\n\t\t\t}\n\n\t\t\tif (tagName && tagName.toLowerCase() === 'form') {\n\t\t\t\tconst action = $(this).attr('action');\n\t\t\t\tconst method = $(this).attr('method');\n\t\t\t\toutput +=\n                    `.andExpect(MockMvcResultMatchers.xpath(\"//${tagName.toLowerCase()}[@id='${id}']/@action\")\n\t\t\t\t\t\t.string(Matchers.equalToIgnoringWhiteSpace(\"${action}\")))\n\t\t\t\t\t\t\n                    `;\n\t\t\t\toutput +=\n                    `.andExpect(MockMvcResultMatchers.xpath(\"//${tagName.toLowerCase()}[@id='${id}']/@method\")\n\t\t\t\t\t\t.string(Matchers.equalToIgnoringWhiteSpace(\"${method}\")))\n\t\t\t\t\t\t\n                    `;\n\t\t\t}\n\n\t\t\tif (tagName && tagName.toLowerCase() === 'input') {\n\t\t\t\tconst type = $(this).attr('type');\n\t\t\t\toutput +=\n                    `.andExpect(MockMvcResultMatchers.xpath(\"//${tagName.toLowerCase()}[@id='${id}']/@type\").string(\"${type}\"))\n\t\t\t\t\t\n\t\t\t\t\t`;\n\n\t\t\t\tif (type === 'radio' || type === 'checkbox') {\n\t\t\t\t\tconst checked = $(this).attr('checked');\n\t\t\t\t\tif (checked) {\n\t\t\t\t\t\toutput +=\n                            `.andExpect(MockMvcResultMatchers.xpath(\"//${tagName.toLowerCase()}[@id='${id}']/@checked\").string(\"${checked}\"))\n\t\t\t\t\t\t\t \n\t\t\t\t\t\t\t`;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (tagName && tagName.toLowerCase() === 'select') {\n\t\t\t\tconst options = $(this).find('option');\n\t\t\t\toutput +=\n                    `.andExpect(MockMvcResultMatchers.xpath(\"//${tagName.toLowerCase()}[@id='${id}']/option\").nodeCount(${options.length}))\n\t\t\t\t\t\n\t\t\t\t\t`;\n\t\t\t\toptions.each(function (i) {\n\n\t\t\t\t\toutput +=\n                        `.andExpect(MockMvcResultMatchers.xpath(\"//${tagName.toLowerCase()}[@id='${id}']/option[${i + 1}]\").exists())\n\t\t\t\t\t\t\n\t\t\t\t\t\t`;\n\n\t\t\t\t\tconst optionText = $(this).text();\n\n\t\t\t\t\tif (optionText) {\n\t\t\t\t\t\tconst optionValue = $(this).attr('value');\n\t\t\t\t\t\toutput +=\n                            `.andExpect(MockMvcResultMatchers.xpath(\"//${tagName.toLowerCase()}[@id='${id}']/option[${i + 1}]\")\n                            \t.string(Matchers.equalToIgnoringWhiteSpace(\"${optionText}\")))\n                            \n                            `;\n\n\t\t\t\t\t\toutput +=\n                            `.andExpect(MockMvcResultMatchers.xpath(\"//${tagName.toLowerCase()}[@id='${id}']/option[${i + 1}]/@value\")\n                            \t.string(Matchers.equalToIgnoringWhiteSpace(\"${optionValue}\")))\n                            \n                            `;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst selected = $(this).attr('selected');\n\t\t\t\t\tif (selected) {\n\t\t\t\t\t\toutput +=\n                            `.andExpect(MockMvcResultMatchers.xpath(\"//${tagName.toLowerCase()}[@id='${id}']/option[${i + 1}]/@selected\")\n                            \t.string(Matchers.equalToIgnoringWhiteSpace(\"${selected}\")))\n                            `;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t}\n\t\t});\n\toutput += `;\n\t}`;\n\t\n\tconst javaFormatter = Formatter.createJavaFormatter('    ');\n\treturn javaFormatter.format(output).join('\\n');\n};\n","import Formatter from 'auto-format';\nimport * as S from 'string';\n\nconst getClassName = (name) => {\n\treturn capitalizeFirst(S( name ).camelize().s);\n}\n\nconst capitalizeFirst = (str) => str.charAt(0).toUpperCase() + str.slice(1);\n\nconst getConstants = (constantString) => {\n\treturn constantString.split('\\n')\n\t\t.map(c => `private static final ${c};`)\n\t\t.join('\\n');\n}\n\nconst getAutowiredServices = (autowiredServicesString, isTest, MockBean = 'MockBean') => {\n\treturn autowiredServicesString.split('\\n')\n\t\t.map(c => `@${isTest ? MockBean : 'Autowired'}\n    ${c};`)\n\t\t.join('\\n');\n}\n\nconst getEndpoints = (endpointsString) => {\n\treturn endpointsString.split('\\n')\n\t\t.map(c => {\n\t\t\tconst [httpMethod, path, methodName, templateName] = c.split(' ');\n\n\t\t\tif(httpMethod.toLowerCase() === 'get') {\n\t\t\t\treturn `private ModelAndView get${capitalizeFirst(methodName)}ModelAndView()\n\t\t\t\t{\n\t\t\t\t\tModelAndView modelAndView = new ModelAndView(\"${templateName}\");\n\t\t\t\t\t//        modelAndView.addObject(\"some-key\", \"Somevalue\");\n\t\t\t\t\treturn modelAndView;\n\t\t\t\t}\n\n\t\t\t\t\t\t@GetMapping(value=\"${path}\")\n                        public ModelAndView ${methodName}() \n                        {\n\t\t\t\t\t\t\treturn get${capitalizeFirst(methodName)}ModelAndView();\n                        }\n                        `;\n\t\t\t} \n\t\t\telse if(['post', 'put', 'delete'].indexOf(httpMethod.toLowerCase()) !== -1)\n\t\t\t{\n\t\t\t\tconst redirectTo = templateName;\n\t\t\t\treturn `@PostMapping(value=\"${path}\")\n\t\t\t\tpublic ModelAndView ${methodName}(@Valid @ModelAttribute(\"form\") MyForm form, BindingResult bindingResult) \n\t\t\t\t{\n\t\t\t\tif (bindingResult.hasErrors()) {\n\t\t\t\t\t//TODO: implement model and view\n\t\t\t\t\treturn new ModelAndView();\n\t\t\t\t}\n\n\t\t\t\t// TODO: use form and consume your service here!\n\n\t\t\t\treturn new ModelAndView(\"redirect:${redirectTo}\");\n\t\t\t\t}`\n\t\t\t}\n\t\t\t\n\t\t\treturn '';\n\t\t})\n\t\t.join('\\n');\n}\n\nconst getTestEndpoints = (endpointsString) => {\n\treturn endpointsString.split('\\n')\n\t\t.map(c => {\n\t\t\tconst [httpMethod, path, methodName, templateName] = c.split(' ');\n\n\t\t\tif(httpMethod.toLowerCase() === 'get') {\n\t\t\t\treturn `@Test\n\t\t\t\t\t\tvoid test${methodName}MethodAndAssertStatusAndTemplateAreOk() throws Exception {\n\t\t\t\t\t\t\tmockMvc.perform(MockMvcRequestBuilders.get(\"${path}\"))\n\t\t\t\t\t\t\t\t\t.andExpect(MockMvcResultMatchers.view().name(\"${templateName}\"))\n\t\t\t\t\t\t\t\t\t.andExpect(MockMvcResultMatchers.status().isOk());\n\t\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t\t@Test\n\t\t\t\t\t\tvoid test${methodName}MethodAndTestHtml() throws Exception {\n\t\t\t\t\t\t\tmockMvc.perform(MockMvcRequestBuilders.get(\"${path}\"))\n\t\t\t\t\t\t\t\t\t// TODO: ADD HTML ASSERTIONS AS NEEDED\n\t\t\t\t\t\t\t\t\t.andExpect(MockMvcResultMatchers.xpath(\"//div[@id='bad-id']\").exists());\n\t\t\t\t\t\t}\n                        `;\n\t\t\t}\n\t\t\t\n\t\t\treturn '';\n\t\t\t\n\t\t})\n\t\t.join('\\n');\n}\n\nconst generateControllerClass = (opts) => {\n\n\tconst code = `package ${opts.basePackage}.${opts.controllersPackageName};\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.servlet.ModelAndView;\nimport org.springframework.validation.BindingResult;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.ModelAttribute;\n\n@Controller\npublic class ${getClassName(opts.controllerName)}\n{\n\n    ${getConstants(opts.constants)}\n\n    ${getAutowiredServices(opts.autowiredServices, false)}\n\n    ${getEndpoints(opts.endpoints)}\n}`;\n\n\tconst javaFormatter = Formatter.createJavaFormatter('    ');\n\treturn javaFormatter.format(code).join('\\n');\n}\n\nconst generateControllerTestClass = (opts) => {\n\tconst code = `package ${opts.basePackage}.${opts.controllersPackageName};\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\nimport org.springframework.boot.test.mock.mockito.MockBean;\nimport org.springframework.test.context.junit.jupiter.SpringExtension;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\nimport org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n\n@ExtendWith(SpringExtension.class)\n@WebMvcTest(controllers = ${opts.controllerName}.class)\nclass ${opts.controllerName}Test {\n\n\t${getConstants(opts.constants)}\n\n\t@Autowired\n\tprivate MockMvc mockMvc;\n\n\t${getAutowiredServices(opts.autowiredServices, true)}\n\n\t${getTestEndpoints(opts.endpoints)}\n}`;\n\n\tconst javaFormatter = Formatter.createJavaFormatter('    ');\n\treturn javaFormatter.format(code).join('\\n');\n}\n\nconst generateServiceMethods = (serviceMethodString) => {\n\treturn serviceMethodString.split('\\n')\n\t\t.map(c => {\n\t\t\tconst [visibilityKeyword, returnType, methodName] = c.split(' ');\n\t\t\t\n\t\t\tif(!visibilityKeyword || !returnType || !methodName) return '\\n';\n\n\t\t\tif(returnType.toLowerCase() === 'void') {\n\t\t\t\treturn `${visibilityKeyword} ${returnType} ${methodName}()\n                        {\n\t\t\t\t\t\t\t//TODO: Please do implementation\n                        }\n                        `;\n\t\t\t} \n\t\t\telse\n\t\t\t{\n\t\t\t\treturn `${visibilityKeyword} ${returnType} ${methodName}()\n                        {\n\t\t\t\t\t\t\t//TODO: Please complete implementation and return an object of type ${returnType}\n\t\t\t\t\t\t\treturn (${returnType}) new Object();\n                        }\n                        `;\n\t\t\t}\n\t\t})\n\t\t.join('\\n');\n}\n\nconst generateServiceTestMethods = (serviceMethodString) => {\n\treturn serviceMethodString.split('\\n')\n\t\t.map(c => {\n\t\t\tconst [visibilityKeyword, returnType, methodName] = c.split(' ');\n\t\t\t\n\t\t\tif(!visibilityKeyword || !returnType || !methodName) return '\\n';\n\n\t\t\treturn `void test${capitalizeFirst(methodName)}Method()\n\t{\n\t\t//TODO: Please complete implementation and return an object of type ${returnType}\n\t\treturn (${returnType}) new Object();\n\t}\n\t`;\n\t\t})\n\t\t.join('\\n');\n}\n\n\nconst generateServiceClass = (opts) => {\n\n\tconst code = `package ${opts.basePackage}.${opts.servicesPackageName};\n\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class ${opts.serviceName} {\n\t${getConstants(opts.constants)}\n\n\t${getAutowiredServices(opts.autowiredServices, false)}\n\t\n\t${generateServiceMethods(opts.serviceMethods)}\n}`;\n\n\tconst javaFormatter = Formatter.createJavaFormatter('    ');\n\treturn javaFormatter.format(code).join('\\n');\n}\n\nconst generateServiceTestClass = (opts) => {\n\treturn `package ${opts.basePackage}.${opts.servicesPackageName};\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.springframework.test.context.junit.jupiter.SpringExtension;\n\n@ExtendWith(SpringExtension.class)\nclass ${opts.serviceName}Test {\n\n\t${getConstants(opts.constants)}\n\n\t${getAutowiredServices(opts.autowiredServices, true, 'Mock')}\n\n\t@InjectMocks\n\t${opts.serviceName} service = new ${opts.serviceName}();\n\n\t@BeforeEach\n\tvoid setUp() {\n\t\t//TODO: SOME SETUP\n\t}\n\n\t${generateServiceTestMethods(opts.serviceMethods)}\n}`;\n}\n\n\nexport default {\n\tgenerateControllerClass,\n\tgenerateControllerTestClass,\n\tgenerateServiceClass,\n\tgenerateServiceTestClass\n}","import React from \"react\";\nimport {\n    Form,\n    Grid\n} from 'semantic-ui-react';\n\nimport CopyToClipboardComponent from './CopyToClipboardComponent';\nimport HeaderComponent from './HeaderComponent';\nimport generationService from '../services/ClassGeneratorService';\nimport DbService from '../services/DbService';\n\nasync function getSettings () {\n\tlet basePackage = await new DbService().getSetting('basePackage');\n    let controllersPackageName = await new DbService().getSetting('controllersPackageName');\n    \n    console.log('controllersPackageName', controllersPackageName)\n\treturn {\n        basePackage,\n        controllersPackageName\n    };\n}\n\nexport default class ControllerGeneratorComponent extends React.Component {\n    state = {\n\t\tbasePackage: 'my.package',\n\t\tcontrollerName: 'MyController',\n\t\tconstants: `String MY_CONSTANT = \"template\"`,\n\t\tautowiredServices: `MyControllerService myControllerService`,\n\t\tendpoints: `GET /some-path getSomePathPage template-view\\nGET /another-path getAnotherPathPage another-template-view\\nPOST /post-path postForm /redirect-to`,\n\n        controllerClass: null,\n        controllerTestClass: null\n    };\n\n    metaDataKey = 'ControllerGenerator';\n    dbService = new DbService();\n\n    constructor() {\n        super();\n        \n        getSettings().then(bp => this.setState(bp))\n        this.dbService.getMetadata(this.metaDataKey)\n            .then(md => {\n                if(md) {\n                    this.setState(md.values);\n                }\n            });\n\n    }\n\n    handleChange = (e, { name, value }) => this.setState({ [name]: value });\n\n    handleSubmit = () => {\n        const { basePackage, controllerName, controllersPackageName, constants, autowiredServices, endpoints } = this.state;\n        const controllerClass = generationService.generateControllerClass({\n\t\t\tbasePackage,\n            controllerName,\n            controllersPackageName,\n\t\t\tconstants,\n\t\t\tautowiredServices,\n\t\t\tendpoints\n        });\n        \n        const controllerTestClass = generationService.generateControllerTestClass({\n\t\t\tbasePackage,\n            controllerName,\n            controllersPackageName,\n\t\t\tconstants,\n\t\t\tautowiredServices,\n\t\t\tendpoints\n\t\t});\n        \n        this.setState({\n            controllerClass: controllerClass,\n            controllerTestClass: controllerTestClass\n        })\n\n        this.dbService.saveMetadata(this.metaDataKey, {basePackage, controllerName, controllersPackageName, constants, autowiredServices, endpoints});\n\n    }\n\n    render() {\n\n        const { \n\t\t\tcontrollerName, \n\t\t\tconstants, \n\t\t\tautowiredServices,\n\t\t\tendpoints, \n            controllerClass,\n            controllerTestClass\n         } = this.state;\n\n        return (\n            <div>\n                <Grid columns={1} padded>\n                    <Grid.Column>\n                        <HeaderComponent title='CONTROLLER GENERATOR'\n                            subTitle='Generate a Spring Boot controller and its Junit test class.' />\n                    </Grid.Column>\n                </Grid>\n                <Grid columns={2} padded>\n                    <Grid.Column>\n                        <Form\n                            size=\"large\"\n                            onSubmit={this.handleSubmit}>\n\n                            \n                            <Form.Input\n                                label='Controller Name'\n                                placeholder='Controller Name'\n                                name='controllerName'\n                                content='Some content'\n                                value={controllerName}\n                                onChange={this.handleChange}\n                            />\n\n                           <Form.TextArea\n                                label=\"Constants\"\n\t\t\t\t\t\t\t\tplaceholder='Constants'\n\t\t\t\t\t\t\t\t\n                                name='constants'\n                                rows='3'\n                                value={constants}\n                                onChange={this.handleChange}\n                            />\n\n\t\t\t\t\t\t\t<Form.TextArea\n                                label=\"Autowired Services\"\n\t\t\t\t\t\t\t\tplaceholder='Autowired Services'\n\t\t\t\t\t\t\t\t\n                                name='autowiredServices'\n                                rows='3'\n                                value={autowiredServices}\n                                onChange={this.handleChange}\n                            />\n\t\t\t\t\t\t\t<Form.TextArea\n                                label=\"Endpoints\"\n\t\t\t\t\t\t\t\tplaceholder='Endpoints'\n\t\t\t\t\t\t\t\t\n                                name='endpoints'\n                                rows='3'\n                                value={endpoints}\n                                onChange={this.handleChange}\n                            />\n\n\t\t\t\t\t\t\t\n                            <Form.Button primary content='GENERATE CLASSES' />\n\n                        </Form>\n                    </Grid.Column>\n\n                    <Grid.Column>\n\n                        {controllerClass &&\n                            <div>\n                                <CopyToClipboardComponent \n                                    title='CONTROLLER CLASS' \n                                    textToCopy={controllerClass} />\n\n                                <CopyToClipboardComponent \n                                    title='CONTROLLER TEST CLASS' \n                                    textToCopy={controllerTestClass} />\n                            </div>\n                            \n                        }\n                    </Grid.Column>\n                </Grid>\n            </div>\n\n        );\n    }\n}\n","import React from \"react\";\nimport {\n    Form,\n    Grid\n} from 'semantic-ui-react';\n\nimport CopyToClipboardComponent from './CopyToClipboardComponent';\nimport HeaderComponent from './HeaderComponent';\nimport generationService from '../services/ClassGeneratorService';\nimport DbService from '../services/DbService';\n\nasync function getSettings () {\n\tlet basePackage = await new DbService().getSetting('basePackage');\n    let servicesPackageName = await new DbService().getSetting('servicesPackageName');\n    \n\treturn {\n        basePackage,\n        servicesPackageName\n    };\n}\n\nexport default class ServiceGeneratorComponent extends React.Component {\n    state = {\n\t\tbasePackage: 'my.package',\n\t\tserviceName: 'MyService',\n\t\tconstants: `String MY_CONSTANT = \"a constant\"`,\n\t\tautowiredServices: `JpaRepository jpaRepository`,\n\t\tserviceMethods: `public void doSomething\\npublic void doSomethingElse\\npublic String getFirstName`,\n\n        serviceClass: null,\n        serviceTestClass: null\n    };\n\n    metaDataKey = 'ServiceGenerator';\n    dbService = new DbService();\n\n    constructor() {\n        super();\n        \n        getSettings().then(bp => this.setState(bp))\n        this.dbService.getMetadata(this.metaDataKey)\n            .then(md => {\n                if(md) {\n                    this.setState(md.values);\n                }\n            });\n\n    }\n\n    handleChange = (e, { name, value }) => this.setState({ [name]: value });\n\n    handleSubmit = () => {\n        const { basePackage, serviceName, servicesPackageName, constants, autowiredServices, serviceMethods } = this.state;\n        const serviceClass = generationService.generateServiceClass({\n\t\t\tbasePackage,\n            serviceName,\n            servicesPackageName,\n\t\t\tconstants,\n\t\t\tautowiredServices,\n\t\t\tserviceMethods\n        });\n        \n        const serviceTestClass = generationService.generateServiceTestClass({\n\t\t\tbasePackage,\n            serviceName,\n            servicesPackageName,\n\t\t\tconstants,\n\t\t\tautowiredServices,\n\t\t\tserviceMethods\n\t\t});\n        \n        this.setState({\n            serviceClass: serviceClass,\n            serviceTestClass: serviceTestClass\n        })\n\n        this.dbService.saveMetadata(this.metaDataKey, {basePackage, serviceName, servicesPackageName, constants, autowiredServices, serviceMethods});\n    }\n\n    render() {\n\n        const { \n\t\t\tserviceName, \n\t\t\tconstants, \n\t\t\tautowiredServices,\n\t\t\tserviceMethods, \n            serviceClass,\n            serviceTestClass\n         } = this.state;\n\n        return (\n            <div>\n                <Grid columns={1} padded>\n                    <Grid.Column>\n                        <HeaderComponent title='SERVICE GENERATOR'\n                            subTitle='Generate a Spring Boot Service and its Junit test class.' />\n                    </Grid.Column>\n                </Grid>\n                <Grid columns={2} padded>\n                    <Grid.Column>\n                        <Form\n                            size=\"large\"\n                            onSubmit={this.handleSubmit}>\n\n\t\t\t\t\t\t\t<Form.Input\n                                label='Service Name'\n                                placeholder='Service Name'\n                                name='serviceName'\n                                value={serviceName}\n                                onChange={this.handleChange}\n                            />\n                            <Form.TextArea\n                                label=\"Constants\"\n\t\t\t\t\t\t\t\tplaceholder='Constants'\n\t\t\t\t\t\t\t\t\n                                name='constants'\n                                rows='3'\n                                value={constants}\n                                onChange={this.handleChange}\n                            />\n\t\t\t\t\t\t\t<Form.TextArea\n                                label=\"Autowired Services\"\n\t\t\t\t\t\t\t\tplaceholder='Autowired Services'\n\t\t\t\t\t\t\t\t\n                                name='autowiredServices'\n                                rows='3'\n                                value={autowiredServices}\n                                onChange={this.handleChange}\n                            />\n\t\t\t\t\t\t\t<Form.TextArea\n                                label=\"Service Methods\"\n\t\t\t\t\t\t\t\tplaceholder='Service Methods'\n\t\t\t\t\t\t\t\t\n                                name='serviceMethods'\n                                rows='3'\n                                value={serviceMethods}\n                                onChange={this.handleChange}\n                            />\n\n\t\t\t\t\t\t\t\n                            <Form.Button primary content='GENERATE CLASSES' />\n\n                        </Form>\n                    </Grid.Column>\n\n                    <Grid.Column>\n\n                        {serviceClass &&\n                            <div>\n                                <CopyToClipboardComponent \n                                    title='SERVICE CLASS' \n                                    textToCopy={serviceClass} />\n\n                                <CopyToClipboardComponent \n                                    title='SERVICE TEST CLASS' \n                                    textToCopy={serviceTestClass} />\n                            </div>\n                            \n                        }\n                    </Grid.Column>\n                </Grid>\n            </div>\n\n        );\n    }\n}\n","import React from \"react\";\nimport {\n    Form,\n    Grid,\n    Modal\n} from 'semantic-ui-react';\n\nimport HeaderComponent from './HeaderComponent';\nimport DbService from '../services/DbService';\n\nexport default class SettingsComponent extends React.Component {\n    state = {\n        settings: [],\n        isSaved: false\n    };\n\n    dbService = new DbService();\n\n    constructor() {\n        super();\n        this.dbService.getSettings().then(settings => {\n            settings.forEach(s => {\n                this.setState({[s.propertyName] : s.value});\n            });\n            this.setState({\n                settings\n            });\n        });\n        \n    }\n\n    handleChange = (e, { name, value }) => {\n        this.setState({ [name]: value })\n    };\n\n    handleSubmit = () => {\n        let settingsTmp = this.state.settings;\n        settingsTmp.forEach(s => {\n            s.value = this.state[s.propertyName];\n        });\n\n        this.dbService.setSettings(settingsTmp);\n        this.setState({\n            isSaved: true\n        })\n\n\n    }\n\n    render() {\n\n        const { settings } = this.state\n\n        return (\n            <div>\n                <Grid columns={1} padded>\n                    <Grid.Column>\n                        <HeaderComponent title='SYSTEM SETTINGS'\n                            subTitle='Manage base package settings'\n                            icon='settings' />\n                    </Grid.Column>\n                </Grid>\n                <Grid columns={1} padded>\n                    <Grid.Column>\n                        <Form\n                            size=\"large\"\n                            onSubmit={this.handleSubmit}>\n\n                            {settings.map((s, i) => <Form.Input\n                                key={i}\n                                label={s.name}\n                                placeholder={s.name}\n                                name={s.propertyName}\n                                id={s.id}\n                                value={this.state[s.propertyName]}\n                                onChange={this.handleChange}\n                            />\n                                \n                            )}\n                            \n                            <Modal\n                                trigger={<Form.Button primary content='SAVE SETTINGS' />}\n                                header='SETTINGS SAVED'\n                                content='Settings have been saved successfully!'\n                                actions={[{ key: 'done', content: 'CLOSE', positive: true }]}\n                            />\n                            \n                            \n                        </Form>\n                    </Grid.Column>\n\n                </Grid>\n            </div>\n\n        );\n    }\n}\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { Grid } from 'semantic-ui-react';\n\nimport MenuComponent from './components/MenuComponent';\nimport HtmlToJUnitComponent from './components/HtmlToJUnitComponent';\nimport ControllerGeneratorComponent from './components/ControllerGeneratorComponent';\nimport ServiceGeneratorComponent from './components/ServiceGeneratorComponent';\nimport SettingsComponent from './components/SettingsComponent';\n\nimport DbService from './services/DbService';\n\nfunction App() {\n\n\tnew DbService();\n\t\n\treturn (\n\t\t<Router>\n\t\t\t<div>\n\t\t\t\t<MenuComponent />\n\t\t\t\t\n\t\t\t\t<Grid columns={1} padded>\n\t\t\t\t\t<Grid.Column>\n\t\t\t\t\t\t<Switch>\n\t\t\t\t\t\t\t<Route exact path='/'>\n\t\t\t\t\t\t\t\t<HtmlToJUnitComponent />\n\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t<Route path='/generate-controller'>\n\t\t\t\t\t\t\t\t<ControllerGeneratorComponent />\n\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t<Route path='/generate-service'>\n\t\t\t\t\t\t\t\t<ServiceGeneratorComponent />\n\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t<Route path='/settings'>\n\t\t\t\t\t\t\t\t<SettingsComponent />\n\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t</Switch>\n\t\t\t\t\t</Grid.Column>\n\t\t\t\t</Grid>\n\n\t\t\t</div>\n\t\t</Router>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}